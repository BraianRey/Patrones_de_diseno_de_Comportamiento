/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package co.edu.unicauca.openmarket.presentation;

import co.edu.unicauca.openmarket.domain.Category;
import co.edu.unicauca.openmarket.domain.Product;
import co.edu.unicauca.openmarket.domain.service.CategoryService;
import co.edu.unicauca.openmarket.domain.service.ProductService;
import co.edu.unicauca.openmarket.infra.Messages;
import co.edu.unicauca.openmarket.presentation.commands.OMEditProductCommand;
import co.edu.unicauca.openmarket.presentation.commands.OMInvoker;
import java.awt.Component;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import reloj.frameworkobsobs.Observador;

/**
 *
 * @author BRC_X
 */
public class GUIAssignCategory extends javax.swing.JDialog implements Observador {

    /**
     * Creates new form GUIAssignCategory
     */
    private ProductService productService;
    private CategoryService categoryService;
    private Map<String, Integer> categoryIndexMap = new HashMap<>();
    private OMInvoker ominvoker;

    public GUIAssignCategory(java.awt.Frame parent, boolean modal, ProductService productService, CategoryService categoryService) {
        super(parent, modal);
        initComponents();
        initializeTable();
        this.categoryService = categoryService;
        this.productService = productService;
        ominvoker = new OMInvoker();
        setLocationRelativeTo(null);
    }

    private void initializeTable() {
        tblMyProducts.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Id", "Name", "Description", "Category", "Select"
                }
        ) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 4) {
                    return Boolean.class;
                }
                return super.getColumnClass(columnIndex);
            }
        });
    }

    private void fillList(List<Category> listCategory) {
        if (listCategory.isEmpty()) {
            CBoxCategories.setEditable(false);
        } else {
            CBoxCategories.setEnabled(true);
        }

        for (int i = 0; i < listCategory.size(); i++) {
            Category category = listCategory.get(i);
            String categoryName = category.getName();
            CBoxCategories.addItem(categoryName);
            categoryIndexMap.put(categoryName, i);
        }
    }

    private void fillTable(List<Product> listProducts) {
        initializeTable();
        DefaultTableModel model = (DefaultTableModel) tblMyProducts.getModel();

        for (int i = 0; i < listProducts.size(); i++) {
            Object[] rowData = new Object[5]; // Incrementamos el tamaño a 5 para incluir la columna "Select"
            rowData[0] = listProducts.get(i).getProductId();
            rowData[1] = listProducts.get(i).getName();
            rowData[2] = listProducts.get(i).getDescription();
            if (listProducts.get(i).getCategory() != null) {
                rowData[3] = listProducts.get(i).getCategory().getName();
            }
            rowData[4] = false; // Valor inicial de la casilla de verificación

            model.addRow(rowData);
        }

        // Configurar el renderizador de la columna "Select"
        TableColumn checkboxColumn = tblMyProducts.getColumnModel().getColumn(4);
        checkboxColumn.setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JCheckBox checkbox = new JCheckBox();
                checkbox.setSelected((Boolean) value);
                return checkbox;
            }
        });

        // Configurar el editor de la columna "Select"
        checkboxColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNorth = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CBoxCategories = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnDeshacer = new javax.swing.JButton();
        btnRecuperar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMyProducts = new javax.swing.JTable();

        setTitle("Asignar categorias");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jLabel1.setText("Categoria a asignar:");
        pnlNorth.add(jLabel1);

        CBoxCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBoxCategoriesActionPerformed(evt);
            }
        });
        pnlNorth.add(CBoxCategories);

        btnSearch.setText("Asignar a:");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlNorth.add(btnSearch);

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        pnlNorth.add(jButton1);

        btnDeshacer.setText("Deshacer");
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });
        pnlNorth.add(btnDeshacer);

        btnRecuperar.setText("Recuperar");
        btnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecuperarActionPerformed(evt);
            }
        });
        pnlNorth.add(btnRecuperar);

        getContentPane().add(pnlNorth, java.awt.BorderLayout.PAGE_START);

        tblMyProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMyProducts);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // 
    }//GEN-LAST:event_exitForm

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String selectedCategoryName = "";
        Category MyCategory = null;
        if (CBoxCategories.getItemCount() == 0) {
            return;
        }
        if (CBoxCategories.getSelectedItem() != null) {
            selectedCategoryName = CBoxCategories.getSelectedItem().toString();
            //Messages.showMessageDialog(selectedCategoryName, "selectedCategoryName");
            MyCategory = categoryService.findCategoryByName(selectedCategoryName);
            //Messages.showMessageDialog(MyCategory.getName(), "selectedCategoryName Post Find");
        } else {
            return;
        }
        for (int i = 0; i < tblMyProducts.getRowCount(); i++) {
            if (Boolean.parseBoolean(tblMyProducts.getValueAt(i, 4).toString())) {
                Long productId = Long.parseLong(tblMyProducts.getValueAt(i, 0).toString());
                Product prod = new Product();
                prod.setName(tblMyProducts.getValueAt(i, 1).toString());
                prod.setDescription(tblMyProducts.getValueAt(i, 2).toString());
                prod.setCategory(MyCategory);
                // Messages.showMessageDialog(prod.getName(), "Categoria del prod");

                OMEditProductCommand comm = new OMEditProductCommand(productId, productService, categoryService, prod.getName(), prod.getDescription(), 0, prod.getCategory());
                ominvoker.addCommand(comm);
                ominvoker.execute();

                //Messages.showMessageDialog("Se actualizo", "Proceso: " + productService.findProductById(productId).getName());
                Messages.showMessageDialog(productService.findProductById(productId).getCategory().getName(), "Categoria actualiz");
            }
        }
        if (MyCategory != null) {
            Messages.showMessageDialog("Se termino el proceso", "Categoria: " + MyCategory.getName());
        }
        actualizar();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void CBoxCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBoxCategoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBoxCategoriesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        actualizar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed
        if (ominvoker.hasMoreCommands()) {
            ominvoker.unexecute();
            actualizar();
        }
    }//GEN-LAST:event_btnDeshacerActionPerformed

    private void btnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecuperarActionPerformed
        if (ominvoker.hasMoreRecuperableCommands()) {
            ominvoker.reexecute();
            actualizar();
        }
    }//GEN-LAST:event_btnRecuperarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBoxCategories;
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnRecuperar;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlNorth;
    private javax.swing.JTable tblMyProducts;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {
        fillTable(productService.findAllProducts());
        fillList(categoryService.findAllCategories());
    }
}
